// Generated by CoffeeScript 1.6.2
(function() {
  var MoveBehavior, UserInputMoveBehavior, atom,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MoveBehavior = require("../coffee/move_behavior.coffee").MoveBehavior;

  atom = require("../spec/mock/atom_mock.coffee").atom;

  exports.UserInputMoveBehavior = UserInputMoveBehavior = (function(_super) {
    __extends(UserInputMoveBehavior, _super);

    function UserInputMoveBehavior() {
      UserInputMoveBehavior.__super__.constructor.call(this);
      this.history_ = [void 0, void 0];
    }

    UserInputMoveBehavior.prototype.determineVelocityVector_ = function() {
      if (this.inputIsPressed_()) {
        this.setNextVelocityVector_();
      } else if (this.wasMovingDiagonally_()) {
        this.keepMovingDiagonally_();
      }
      return this.updateHistory_();
    };

    UserInputMoveBehavior.prototype.setNextVelocityVector_ = function() {
      this.velocityVector_.x = this.velocityVector_.y = 0;
      if (atom.input.down('left')) {
        this.velocityVector_.x -= 1;
      }
      if (atom.input.down('right')) {
        this.velocityVector_.x += 1;
      }
      if (atom.input.down('up')) {
        this.velocityVector_.y -= 1;
      }
      if (atom.input.down('down')) {
        return this.velocityVector_.y += 1;
      }
    };

    UserInputMoveBehavior.prototype.inputIsPressed_ = function() {
      var dir, _i, _len, _ref;

      _ref = ['left', 'right', 'up', 'down'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        if (atom.input.down(dir)) {
          return true;
        }
      }
      return false;
    };

    UserInputMoveBehavior.prototype.wasMovingDiagonally_ = function() {
      if (!this.history_[1]) {
        return false;
      }
      return this.history_[1].x * this.history_[1].y !== 0;
    };

    UserInputMoveBehavior.prototype.keepMovingDiagonally_ = function() {
      return this.velocityVector_ = this.history_[1];
    };

    UserInputMoveBehavior.prototype.updateHistory_ = function() {
      this.history_[1] = this.history_[0];
      return this.history_[0] = {
        x: this.velocityVector_.x,
        y: this.velocityVector_.y
      };
    };

    return UserInputMoveBehavior;

  })(MoveBehavior);

}).call(this);

/*
//@ sourceMappingURL=user_input_move_behavior.map
*/
