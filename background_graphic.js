// Generated by CoffeeScript 1.6.2
(function() {
  var BackgroundGraphic, Graphic,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Graphic = require("../coffee/graphic.coffee").Graphic;

  exports.BackgroundGraphic = BackgroundGraphic = (function(_super) {
    __extends(BackgroundGraphic, _super);

    function BackgroundGraphic(tile_) {
      this.tile_ = tile_;
      BackgroundGraphic.__super__.constructor.call(this, this.tile_);
      this.tileGrid_ = [];
      this.frameRatios_ = [1];
    }

    BackgroundGraphic.prototype.setFrameOccurrenceRatios = function(frameRatios_) {
      var r, sum;

      this.frameRatios_ = frameRatios_;
      sum = this.frameRatios_.reduce(function(a, b) {
        return a + b;
      });
      return this.frameRatios_ = (function() {
        var _i, _len, _ref, _results;

        _ref = this.frameRatios_;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(r / sum);
        }
        return _results;
      }).call(this);
    };

    BackgroundGraphic.prototype.fill = function(context, xOffset, yOffset, width, height) {
      var col, row, x, y, _i, _ref, _results;

      if (!this.isLoaded_()) {
        return;
      }
      _results = [];
      for (col = _i = 0, _ref = (width - 1) / this.tile_.frameW; 0 <= _ref ? _i <= _ref : _i >= _ref; col = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;

          _results1 = [];
          for (row = _j = 0, _ref1 = (height - 1) / this.tile_.frameH; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
            this.selectFrame_(col, row);
            x = xOffset + col * this.tile_.frameW;
            y = yOffset + row * this.tile_.frameH;
            _results1.push(this.tile_.draw(context, x, y));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    BackgroundGraphic.prototype.selectFrame_ = function(col, row) {
      var frameNum, _base, _ref;

      frameNum = 0;
      if ((_ref = (_base = this.tileGrid_)[row]) == null) {
        _base[row] = [];
      }
      if (this.tileGrid_[row][col]) {
        frameNum = this.tileGrid_[row][col];
      } else {
        frameNum = this.chooseFrameNumber_();
        this.tileGrid_[row][col] = frameNum;
      }
      return this.goToFrame_(frameNum);
    };

    BackgroundGraphic.prototype.chooseFrameNumber_ = function() {
      var frameNum, rand, ratio, sum, _i, _len, _ref;

      sum = 0;
      rand = Math.random();
      _ref = this.frameRatios_;
      for (frameNum = _i = 0, _len = _ref.length; _i < _len; frameNum = ++_i) {
        ratio = _ref[frameNum];
        sum += ratio;
        if (rand <= sum) {
          return frameNum + 1;
        }
      }
    };

    BackgroundGraphic.prototype.goToFrame_ = function(frameNum) {
      var col, row, _ref;

      _ref = this.tile_.frameNumberToRowCol(frameNum), row = _ref.row, col = _ref.col;
      return this.tile_.setFrame(row, col);
    };

    return BackgroundGraphic;

  })(Graphic);

}).call(this);

/*
//@ sourceMappingURL=background_graphic.map
*/
