// Generated by CoffeeScript 1.6.2
(function() {
  var Animation, EntitySpriteFactory, GraphicFactory, Renderer, Sprite, atom, preloadImages;

  Animation = require("../coffee/animation.coffee").Animation;

  EntitySpriteFactory = require("../coffee/entity_sprite_factory.coffee").EntitySpriteFactory;

  GraphicFactory = require("../coffee/graphic_factory.coffee").GraphicFactory;

  Sprite = require("../spec/mock/sprite_mock.coffee").Sprite;

  atom = require("../spec/mock/atom_mock.coffee").atom;

  exports.Renderer = Renderer = (function() {
    function Renderer(gameInfo_) {
      this.gameInfo_ = gameInfo_;
      this.prevState_ = 'none';
      this.deathAnimations_ = [];
      this.backgroundGraphic_ = GraphicFactory.create('background');
      this.initAnimations_();
    }

    Renderer.prototype.initAnimations_ = function() {
      this.fadeToBlackAnimation_ = new Animation;
      return this.fadeToBlackAnimation_.vary('alpha').from(0).to(1).forDuration(2);
    };

    Renderer.prototype.update = function(dt) {
      switch (this.gameInfo_.getState()) {
        case 'dying':
          return this.fadeToBlackAnimation_.update(dt);
      }
    };

    Renderer.prototype.draw = function() {
      switch (this.gameInfo_.getState()) {
        case 'playing':
          this.drawPlayScreen_();
          break;
        case 'dying':
          this.drawDyingScreen_();
          break;
        case 'lost':
          this.drawScoreScreen_();
          break;
        case 'paused':
          this.drawPauseScreen_();
      }
      return this.prevState_ = this.gameInfo_.getState();
    };

    Renderer.prototype.drawPlayScreen_ = function() {
      this.drawBackground_();
      this.drawEntities_();
      this.drawDeaths_();
      atom.context.fillStyle = 'black';
      atom.context.textAlign = "left";
      atom.context.font = "10px Helvetica";
      return atom.context.fillText(atom.msg, 1, 40);
    };

    Renderer.prototype.drawBackground_ = function() {
      atom.context.clearRect(0, 0, atom.width, atom.height);
//      return this.backgroundGraphic_.fill(atom.context, 0, 0, atom.width, atom.height);
    };

    Renderer.prototype.drawEntities_ = function() {
      var entities, entity, _i, _j, _len, _len1, _results;

      entities = this.gameInfo_.getEntities().sort(this.yCoordComparator_);
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        this.drawShadow_(entity);
      }
      _results = [];
      for (_j = 0, _len1 = entities.length; _j < _len1; _j++) {
        entity = entities[_j];
        _results.push(entity.draw(atom.context));
      }
      return _results;
    };

    Renderer.prototype.drawDeaths_ = function() {
      var a, deathAnimation, _i, _len, _ref;

      _ref = this.deathAnimations_;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        deathAnimation = _ref[_i];
        deathAnimation.draw(atom.context);
      }
      return this.deathAnimations_ = (function() {
        var _j, _len1, _ref1, _results;

        _ref1 = this.deathAnimations_;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          a = _ref1[_j];
          if (a.isAnimating()) {
            _results.push(a);
          }
        }
        return _results;
      }).call(this);
    };

    Renderer.prototype.yCoordComparator_ = function(e1, e2) {
      return e1.getPos().y > e2.getPos().y;
    };

    Renderer.prototype.drawShadow_ = function(entity) {
      atom.context.setAlpha(.35);
      atom.context.fillStyle = 'black';
      this.fillEllipseFromCenter_(entity.getPos().x, entity.getPos().y, entity.getRadius() * 2, entity.getRadius());
      return atom.context.setAlpha(1);
    };

    Renderer.prototype.fillEllipseFromCenter_ = function(cx, cy, w, h) {
      return this.fillEllipse_(cx - w / 2.0, cy - h / 2.0, w, h);
    };

    Renderer.prototype.fillEllipse_ = function(x, y, w, h) {
      var ctx, kappa, ox, oy, xe, xm, ye, ym;

      kappa = .5522848;
      ox = (w / 2) * kappa;
      oy = (h / 2) * kappa;
      xe = x + w;
      ye = y + h;
      xm = x + w / 2;
      ym = y + h / 2;
      ctx = atom.context;
      ctx.beginPath();
      ctx.moveTo(x, ym);
      ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
      ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
      ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
      ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
      ctx.fill();
      return ctx.closePath();
    };

    Renderer.prototype.drawDyingScreen_ = function() {
      this.drawPlayScreen_();
      return this.fadeToBlack_();
    };

    Renderer.prototype.fadeToBlack_ = function() {
      if (this.prevState_ === 'playing') {
        this.fadeToBlackAnimation_.start();
      }
      atom.context.setAlpha(this.fadeToBlackAnimation_.get('alpha'));
      atom.context.fillStyle = 'black';
      atom.context.fillRect(0, 0, atom.width, atom.height);
      return atom.context.setAlpha(1);
    };

    Renderer.prototype.playerDeathAnimationFinished = function() {
      return this.fadeToBlackAnimation_.isFinished();
    };

    Renderer.prototype.drawScoreScreen_ = function() {
      this.drawDyingScreen_();
      return this.drawScore_();
    };

    Renderer.prototype.drawScore_ = function() {
      return this.broadcastMessage_("score: " + (this.gameInfo_.getScore()));
    };

    Renderer.prototype.drawPauseScreen_ = function() {
      if (this.prevState_ !== 'paused') {
        atom.context.setAlpha(.75);
        atom.context.fillStyle = 'black';
        atom.context.fillRect(0, 0, atom.width, atom.height);
        atom.context.setAlpha(1);
        return this.broadcastMessage_("paused");
      }
    };

    Renderer.prototype.broadcastMessage_ = function(text) {
      atom.context.fillStyle = 'white';
      atom.context.textAlign = "center";
      atom.context.font = "100px Chelsea Market";
      return atom.context.fillText(text, atom.width / 2, atom.height / 2);
    };

    Renderer.prototype.drawEntityDeath = function(entity) {
      var deathAnimation;

      deathAnimation = GraphicFactory.create('death');
      deathAnimation.runOnce();
      deathAnimation.setPos(entity.getGraphic().getCenter());
      return this.deathAnimations_.push(deathAnimation);
    };

    return Renderer;

  })();

  preloadImages = function() {
    var images, m;

    images = (function() {
      var _i, _len, _ref, _results;

      _ref = EntitySpriteFactory.getImagesToPreload();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        _results.push(m);
      }
      return _results;
    })();
    images.push.apply(images, (function() {
      var _i, _len, _ref, _results;

      _ref = GraphicFactory.getImagesToPreload();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        _results.push(m);
      }
      return _results;
    })());
    return Sprite.preloadImages(images, {});
  };

  preloadImages();

}).call(this);

/*
//@ sourceMappingURL=renderer.map
*/
