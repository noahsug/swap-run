// Generated by CoffeeScript 1.6.2
(function() {
  exports.util = {
    shuffle: function(arr) {
      var i, swapIndex, _i, _ref;

      if (arr.length < 2) {
        return arr;
      }
      for (i = _i = 0, _ref = arr.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        swapIndex = this.randInt(i, arr.length - 1);
        this.swap(arr, i, swapIndex);
      }
      return arr;
    },
    swap: function(arr, index1, index2) {
      var _ref;

      return _ref = [arr[index1], arr[index2]], arr[index2] = _ref[0], arr[index1] = _ref[1], _ref;
    },
    randInt: function(min, max) {
      var _ref;

      if (arguments.length === 1) {
        _ref = [0, min], min = _ref[0], max = _ref[1];
      }
      if (min > max) {
        throw "min must be <= max, but " + min + " > " + max;
      }
      return Math.floor(Math.random() * (max + 1 - min) + min);
    },
    randElement: function(arr) {
      return arr[this.randInt(arr.length - 1)];
    },
    bound: function(value, min, max) {
      if (max < min) {
        throw "max (${max}) must be >= to min (${min})";
      }
      if (value < min) {
        value = min;
      }
      if (value > max) {
        value = max;
      }
      return value;
    },
    distance: function(a, b) {
      return Math.sqrt(this.distanceSquared(a, b));
    },
    distanceSquared: function(a, b) {
      return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);
    },
    sign: function(num) {
      if (num < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    flipCoin: function() {
      return Math.random() < .5;
    }
  };

}).call(this);

/*
//@ sourceMappingURL=util.map
*/
