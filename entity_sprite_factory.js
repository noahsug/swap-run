// Generated by CoffeeScript 1.6.2
(function() {
  var EntitySpriteFactory, EntitySpriteGraphic, Factory, GraphicFactory, SimpleSpriteBuilder, SpriteBuilder, SpriteMap,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EntitySpriteGraphic = require("../coffee/entity_sprite_graphic.coffee").EntitySpriteGraphic;

  Factory = require("../coffee/factory.coffee").Factory;

  SpriteBuilder = require("../coffee/sprite_builder.coffee").SpriteBuilder;

  GraphicFactory = require("../coffee/graphic_factory.coffee").GraphicFactory;

  SimpleSpriteBuilder = require("../coffee/simple_sprite_builder.coffee").SimpleSpriteBuilder;

  SpriteMap = require("../spec/mock/sprite_map_mock.coffee").SpriteMap;

  exports.EntitySpriteFactory = EntitySpriteFactory = (function(_super) {
    __extends(EntitySpriteFactory, _super);

    EntitySpriteFactory.create = function(type) {
      return Factory.create(this, type);
    };

    EntitySpriteFactory.getImagesToPreload = function() {
      return GraphicFactory.getImagePaths('bald_female.png', 'purple_female.png', 'bat.png', 'ogre.png', 'spectre.png', 'skeleton.png', 'deathknight.png');
    };

    function EntitySpriteFactory() {
      this.spriteBuilder_ = new SpriteBuilder;
      this.simpleSpriteBuilder_ = new SimpleSpriteBuilder;
    }

    EntitySpriteFactory.prototype.creationMethods_ = {
      'player': function() {
        return this.createIPCSprite_('bald_female.png');
      },
      'enemy': function() {
        return this.createIPCSprite_('purple_female.png');
      },
      'bat': function() {
        var graphic, spriteMap;

        spriteMap = this.simpleSpriteBuilder_.build('bat.png', {
          frameH: 96
        });
        graphic = new EntitySpriteGraphic(spriteMap);
        graphic.setOffset({
          x: 0,
          y: -18
        });
        return graphic;
      },
      'ogre': function() {
        var graphic, spriteMap;

        spriteMap = this.simpleSpriteBuilder_.build('ogre.png', {
          'still': {
            endCol: 1
          },
          'up': {
            endCol: 4
          },
          frameW: 96,
          frameH: 96,
          interval: 150
        });
        graphic = new EntitySpriteGraphic(spriteMap);
        graphic.setOffset({
          x: 0,
          y: -23
        });
        this.setStillAnimationInterval_(graphic, 400);
        return graphic;
      },
      'spectre': function() {
        var animationName, graphic, spriteMap, _i, _len, _ref;

        spriteMap = this.simpleSpriteBuilder_.build('spectre.png', {
          'moving': {
            endCol: 3
          },
          'up': {},
          'still': {
            endCol: 1
          },
          'up-still': {},
          frameW: 68,
          frameH: 68,
          interval: 150
        });
        graphic = new EntitySpriteGraphic(spriteMap);
        graphic.setOffset({
          x: -2,
          y: -16
        });
        _ref = ['right-still', 'left-still', 'down-still'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          animationName = _ref[_i];
          graphic.setAnimationInterval(animationName, 400);
        }
        return graphic;
      },
      'skeleton': function() {
        var graphic, spriteMap;

        spriteMap = this.simpleSpriteBuilder_.build('skeleton.png', {
          'right-still': {
            endCol: 1
          },
          'left-still': {
            endCol: 1
          },
          'still': {
            endCol: 2
          },
          frameW: 96,
          frameH: 96,
          interval: 125
        });
        graphic = new EntitySpriteGraphic(spriteMap);
        graphic.setOffset({
          x: 0,
          y: -20
        });
        this.setStillAnimationInterval_(graphic, 500);
        return graphic;
      },
      'deathknight': function() {
        var graphic, spriteMap;

        spriteMap = this.simpleSpriteBuilder_.build('deathknight.png', {
          'moving': {
            endCol: 3
          },
          'still': {
            endCol: 1
          },
          frameW: 84,
          frameH: 84,
          interval: 125
        });
        graphic = new EntitySpriteGraphic(spriteMap);
        graphic.setOffset({
          x: 0,
          y: -17
        });
        this.setStillAnimationInterval_(graphic, 400);
        return graphic;
      }
    };

    EntitySpriteFactory.prototype.createIPCSprite_ = function(fileName) {
      var graphic, spriteMap;

      spriteMap = this.spriteBuilder_.build(fileName, {
        'right': {
          row: 11,
          startCol: 1,
          endCol: 8
        },
        'left': {
          row: 9,
          startCol: 1,
          endCol: 8
        },
        'up': {
          row: 8,
          startCol: 1,
          endCol: 8
        },
        'down': {
          row: 10,
          startCol: 1,
          endCol: 8
        },
        'right-still': {
          row: 11,
          endCol: 0
        },
        'left-still': {
          row: 9,
          endCol: 0
        },
        'up-still': {
          row: 8,
          endCol: 0
        },
        'down-still': {
          row: 10,
          endCol: 0
        },
        'death': {
          row: 20,
          endCol: 4
        },
        frameW: 64,
        frameH: 64,
        interval: 75
      });
      graphic = new EntitySpriteGraphic(spriteMap);
      graphic.setWidth(22);
      graphic.setOffset({
        x: 0,
        y: -28
      });
      return graphic;
    };

    EntitySpriteFactory.prototype.setStillAnimationInterval_ = function(graphic, interval) {
      var animationName, _i, _len, _ref, _results;

      _ref = ['right-still', 'left-still', 'up-still', 'down-still'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        animationName = _ref[_i];
        _results.push(graphic.setAnimationInterval(animationName, interval));
      }
      return _results;
    };

    return EntitySpriteFactory;

  })(Factory);

}).call(this);

/*
//@ sourceMappingURL=entity_sprite_factory.map
*/
