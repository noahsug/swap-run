// Generated by CoffeeScript 1.6.2
(function() {
  var EntityGraphic, EntitySpriteGraphic,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EntityGraphic = require("../coffee/entity_graphic.coffee").EntityGraphic;

  exports.EntitySpriteGraphic = EntitySpriteGraphic = (function(_super) {
    __extends(EntitySpriteGraphic, _super);

    function EntitySpriteGraphic(spriteMap_) {
      this.spriteMap_ = spriteMap_;
      EntitySpriteGraphic.__super__.constructor.apply(this, arguments);
      this.animationIntervals_ = {};
      this.defaultInterval_ = void 0;
    }

    EntitySpriteGraphic.prototype.setEntity = function(entity_) {
      this.entity_ = entity_;
      return this.update();
    };

    EntitySpriteGraphic.prototype.setAnimationInterval = function(animationName, interval) {
      return this.animationIntervals_[animationName] = interval;
    };

    EntitySpriteGraphic.prototype.stop = function() {
      if (!this.isLoaded_()) {
        return;
      }
      return this.spriteMap_.stop();
    };

    EntitySpriteGraphic.prototype.getWidth = function() {
      if (this.width_ != null) {
        return this.width_;
      } else if (this.isLoaded_()) {
        return this.spriteMap_.sprite.frameW;
      } else {
        return EntitySpriteGraphic.__super__.getWidth.call(this);
      }
    };

    EntitySpriteGraphic.prototype.getHeight = function() {
      if (this.height_ != null) {
        return this.height_;
      } else if (this.isLoaded_()) {
        return this.spriteMap_.sprite.frameH;
      } else {
        return EntitySpriteGraphic.__super__.getHeight.call(this);
      }
    };

    EntitySpriteGraphic.prototype.getOffset = function() {
      return EntitySpriteGraphic.__super__.getOffset.call(this);
    };

    EntitySpriteGraphic.prototype.draw = function(context) {
      var pos;

      if (!this.isLoaded_()) {
        return;
      }
      pos = this.getPos();
      pos = this.adjustPosForModifiedWidthOrHeight_(pos);
      return this.spriteMap_.draw(context, pos.x, pos.y);
    };

    EntitySpriteGraphic.prototype.adjustPosForModifiedWidthOrHeight_ = function(pos) {
      var x, y;

      x = pos.x;
      y = pos.y;
      if (this.width_ != null) {
        x -= (this.spriteMap_.sprite.frameW - this.width_) / 2;
      }
      if (this.height_ != null) {
        y -= (this.spriteMap_.sprite.frameH - this.height_) / 2;
      }
      return {
        x: x,
        y: y
      };
    };

    EntitySpriteGraphic.prototype.update = function() {
      var desiredAnimation;

      if (!this.isLoaded_()) {
        return;
      }
      desiredAnimation = this.getDesiredAnimation_();
      if (this.spriteMap_.activeLoop !== desiredAnimation) {
        this.setIntervalForAnimation_(desiredAnimation);
        if (desiredAnimation === 'death') {
          this.spriteMap_.use(desiredAnimation);
          return this.spriteMap_.runOnce();
        } else {
          return this.spriteMap_.start(desiredAnimation);
        }
      }
    };

    EntitySpriteGraphic.prototype.setIntervalForAnimation_ = function(animationName) {
      var interval, _ref, _ref1;

      if ((_ref = this.defaultInterval_) == null) {
        this.defaultInterval_ = this.spriteMap_.sprite.interval;
      }
      interval = (_ref1 = this.animationIntervals_[animationName]) != null ? _ref1 : this.defaultInterval_;
      return this.spriteMap_.sprite.interval = interval;
    };

    EntitySpriteGraphic.prototype.getDesiredAnimation_ = function() {
      var stillSuffix;

      if (!this.entity_.isActive()) {
        return 'death';
      }
      stillSuffix = this.entity_.isMoving() ? '' : '-still';
      return this.entity_.getDirection() + stillSuffix;
    };

    EntitySpriteGraphic.prototype.isLoaded_ = function() {
      return this.spriteMap_.baseImage != null;
    };

    return EntitySpriteGraphic;

  })(EntityGraphic);

}).call(this);

/*
//@ sourceMappingURL=entity_sprite_graphic.map
*/
