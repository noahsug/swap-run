// Generated by CoffeeScript 1.6.2
(function() {
  var EnemySpawner, EntityFactory, EventEmitter, atom, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EntityFactory = require("../coffee/entity_factory.coffee").EntityFactory;

  EventEmitter = require("../coffee/event_emitter.coffee").EventEmitter;

  atom = require("../spec/mock/atom_mock.coffee").atom;

  util = require("../coffee/util.coffee").util;

  exports.EnemySpawner = EnemySpawner = (function(_super) {
    __extends(EnemySpawner, _super);

    function EnemySpawner() {
      EnemySpawner.__super__.constructor.call(this);
      this.spawnTime_ = 99999999999;
      this.timeUntilSpawn_ = 999999999999;
    }

    EnemySpawner.prototype.update = function(dt) {
      var _results;

      this.timeUntilSpawn_ -= dt;
      _results = [];
      while (this.timeUntilSpawn_ < 0) {
        this.spawn_();
        _results.push(this.timeUntilSpawn_ += this.spawnTime_);
      }
      return _results;
    };

    EnemySpawner.prototype.spawn_ = function() {
      var enemy, enemyPos, type;

      type = util.randElement(['enemy', 'bat', 'ogre', 'spectre', 'deathknight', 'skeleton']);
      enemy = EntityFactory.create(type);
      enemyPos = this.getRandomBorderPos_(enemy.getRadius());
      enemy.setPos(enemyPos);
      return this.emit("spawn", enemy);
    };

    EnemySpawner.prototype.getRandomBorderPos_ = function(radius) {
      var coord1, coord2, randomizedDimension, spawnOnTopOrBottom, spawnOnTopOrLeft, staticDimension;

      spawnOnTopOrBottom = util.flipCoin();
      spawnOnTopOrLeft = util.flipCoin();
      randomizedDimension = spawnOnTopOrBottom ? atom.width : atom.height;
      staticDimension = spawnOnTopOrBottom ? atom.height : atom.width;
      coord1 = spawnOnTopOrLeft ? -radius : staticDimension + radius;
      coord2 = Math.random() * (randomizedDimension + 2 * radius) - radius;
      if (spawnOnTopOrBottom) {
        return {
          x: coord2,
          y: coord1
        };
      } else {
        return {
          x: coord1,
          y: coord2
        };
      }
    };

    return EnemySpawner;

  })(EventEmitter);

}).call(this);

/*
//@ sourceMappingURL=enemy_spawner.map
*/
