// Generated by CoffeeScript 1.6.2
(function() {
  var Entity, Player, atom, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require("../coffee/entity.coffee").Entity;

  atom = require("../spec/mock/atom_mock.coffee").atom;

  util = require("../coffee/util.coffee").util;

  exports.Player = Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      _ref = Player.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Player.prototype.update = function(dt) {
      if (atom.input.pressed('swap') && this.isActive()) {
        this.swapPositionsWithNearestEnemy_();
      } else {
        Player.__super__.update.call(this, dt);
      }
      return this.restrictPosition_();
    };

    Player.prototype.swapPositionsWithNearestEnemy_ = function() {
      var nearestEnemy, origPlayerPos;

      nearestEnemy = this.knowledge_.getNearestEnemyTo(this.getPos());
      if (nearestEnemy) {
        origPlayerPos = this.getPos();
        this.setPos(nearestEnemy.getPos());
        nearestEnemy.setPos(origPlayerPos);
        return nearestEnemy.makeSlowToReact();
      }
    };

    Player.prototype.restrictPosition_ = function() {
      var graphicPos;

      graphicPos = this.graphic_.getPos();
      if (graphicPos.x + this.graphic_.getWidth() > atom.width) {
        this.pos_.x -= graphicPos.x + this.graphic_.getWidth() - atom.width;
      }
      if (graphicPos.x < 0) {
        this.pos_.x -= graphicPos.x;
      }
      if (graphicPos.y + this.graphic_.getHeight() > atom.height) {
        this.pos_.y -= graphicPos.y + this.graphic_.getHeight() - atom.height;
      }
      if (graphicPos.y < 0) {
        return this.pos_.y -= graphicPos.y;
      }
    };

    return Player;

  })(Entity);

}).call(this);

/*
//@ sourceMappingURL=player.map
*/
