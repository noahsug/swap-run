// Generated by CoffeeScript 1.6.2
(function() {
  var Animation;

  exports.Animation = Animation = (function() {
    function Animation() {
      this.vars_ = {};
      this.currentVar_ = null;
    }

    Animation.prototype.vary = function(varName) {
      this.currentVar_ = this.vars_[varName] = {};
      return this;
    };

    Animation.prototype.from = function(startValue) {
      this.currentVar_.startValue = startValue;
      return this;
    };

    Animation.prototype.to = function(endValue) {
      this.currentVar_.endValue = endValue;
      return this;
    };

    Animation.prototype.forDuration = function(duration) {
      this.currentVar_.duration = duration;
      return this;
    };

    Animation.prototype.get = function(varName) {
      return this.vars_[varName].value;
    };

    Animation.prototype.start = function() {
      var animationVar, varName, _ref, _ref1, _results;

      _ref = this.vars_;
      _results = [];
      for (varName in _ref) {
        animationVar = _ref[varName];
        if ((_ref1 = animationVar.startValue) == null) {
          animationVar.startValue = 0;
        }
        animationVar.value = animationVar.startValue;
        _results.push(animationVar.elapsed = 0);
      }
      return _results;
    };

    Animation.prototype.update = function(dt) {
      var animationVar, percentDone, valueRange, varName, _ref, _results;

      _ref = this.vars_;
      _results = [];
      for (varName in _ref) {
        animationVar = _ref[varName];
        if (this.varIsFinished_(animationVar)) {
          continue;
        }
        animationVar.elapsed += dt;
        percentDone = animationVar.elapsed / animationVar.duration;
        if (percentDone > 1) {
          percentDone = 1;
        }
        valueRange = animationVar.endValue - animationVar.startValue;
        _results.push(animationVar.value = animationVar.startValue + valueRange * percentDone);
      }
      return _results;
    };

    Animation.prototype.varIsFinished_ = function(animationVar) {
      return animationVar.elapsed >= animationVar.duration;
    };

    Animation.prototype.isFinished = function() {
      var animationVar, varName, _ref;

      _ref = this.vars_;
      for (varName in _ref) {
        animationVar = _ref[varName];
        if (!this.varIsFinished_(animationVar)) {
          return false;
        }
      }
      return true;
    };

    return Animation;

  })();

}).call(this);

/*
//@ sourceMappingURL=animation.map
*/
